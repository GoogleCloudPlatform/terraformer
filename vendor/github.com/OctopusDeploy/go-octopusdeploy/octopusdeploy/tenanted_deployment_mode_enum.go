// Code generated by go-enum
// DO NOT EDIT!

package octopusdeploy

import (
	"fmt"
	"strings"
)

const (
	// Untenanted is a TenantedDeploymentMode of type Untenanted
	// Untenanted resources only participate in Untenanted deployments
	Untenanted TenantedDeploymentMode = iota
	// TenantedOrUntenanted is a TenantedDeploymentMode of type TenantedOrUntenanted
	// TenantedOrUntenanted resources participate in any type of deployment
	TenantedOrUntenanted
	// Tenanted is a TenantedDeploymentMode of type Tenanted
	// Tenanted resources only participate in Tenanted deployments
	Tenanted
)

const _TenantedDeploymentModeName = "UntenantedTenantedOrUntenantedTenanted"

var _TenantedDeploymentModeNames = []string{
	_TenantedDeploymentModeName[0:10],
	_TenantedDeploymentModeName[10:30],
	_TenantedDeploymentModeName[30:38],
}

// TenantedDeploymentModeNames returns a list of possible string values of TenantedDeploymentMode.
func TenantedDeploymentModeNames() []string {
	tmp := make([]string, len(_TenantedDeploymentModeNames))
	copy(tmp, _TenantedDeploymentModeNames)
	return tmp
}

var _TenantedDeploymentModeMap = map[TenantedDeploymentMode]string{
	0: _TenantedDeploymentModeName[0:10],
	1: _TenantedDeploymentModeName[10:30],
	2: _TenantedDeploymentModeName[30:38],
}

// String implements the Stringer interface.
func (x TenantedDeploymentMode) String() string {
	if str, ok := _TenantedDeploymentModeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("TenantedDeploymentMode(%d)", x)
}

var _TenantedDeploymentModeValue = map[string]TenantedDeploymentMode{
	_TenantedDeploymentModeName[0:10]:                   0,
	strings.ToLower(_TenantedDeploymentModeName[0:10]):  0,
	_TenantedDeploymentModeName[10:30]:                  1,
	strings.ToLower(_TenantedDeploymentModeName[10:30]): 1,
	_TenantedDeploymentModeName[30:38]:                  2,
	strings.ToLower(_TenantedDeploymentModeName[30:38]): 2,
}

// ParseTenantedDeploymentMode attempts to convert a string to a TenantedDeploymentMode
func ParseTenantedDeploymentMode(name string) (TenantedDeploymentMode, error) {
	if x, ok := _TenantedDeploymentModeValue[name]; ok {
		return x, nil
	}
	return TenantedDeploymentMode(0), fmt.Errorf("%s is not a valid TenantedDeploymentMode, try [%s]", name, strings.Join(_TenantedDeploymentModeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x *TenantedDeploymentMode) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *TenantedDeploymentMode) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseTenantedDeploymentMode(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
