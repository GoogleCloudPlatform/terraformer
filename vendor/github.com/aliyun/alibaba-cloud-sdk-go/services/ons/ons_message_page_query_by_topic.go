package ons

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// OnsMessagePageQueryByTopic invokes the ons.OnsMessagePageQueryByTopic API synchronously
// api document: https://help.aliyun.com/api/ons/onsmessagepagequerybytopic.html
func (client *Client) OnsMessagePageQueryByTopic(request *OnsMessagePageQueryByTopicRequest) (response *OnsMessagePageQueryByTopicResponse, err error) {
	response = CreateOnsMessagePageQueryByTopicResponse()
	err = client.DoAction(request, response)
	return
}

// OnsMessagePageQueryByTopicWithChan invokes the ons.OnsMessagePageQueryByTopic API asynchronously
// api document: https://help.aliyun.com/api/ons/onsmessagepagequerybytopic.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) OnsMessagePageQueryByTopicWithChan(request *OnsMessagePageQueryByTopicRequest) (<-chan *OnsMessagePageQueryByTopicResponse, <-chan error) {
	responseChan := make(chan *OnsMessagePageQueryByTopicResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.OnsMessagePageQueryByTopic(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// OnsMessagePageQueryByTopicWithCallback invokes the ons.OnsMessagePageQueryByTopic API asynchronously
// api document: https://help.aliyun.com/api/ons/onsmessagepagequerybytopic.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) OnsMessagePageQueryByTopicWithCallback(request *OnsMessagePageQueryByTopicRequest, callback func(response *OnsMessagePageQueryByTopicResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *OnsMessagePageQueryByTopicResponse
		var err error
		defer close(result)
		response, err = client.OnsMessagePageQueryByTopic(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// OnsMessagePageQueryByTopicRequest is the request struct for api OnsMessagePageQueryByTopic
type OnsMessagePageQueryByTopicRequest struct {
	*requests.RpcRequest
	PreventCache requests.Integer `position:"Query" name:"PreventCache"`
	InstanceId   string           `position:"Query" name:"InstanceId"`
	PageSize     requests.Integer `position:"Query" name:"PageSize"`
	Topic        string           `position:"Query" name:"Topic"`
	EndTime      requests.Integer `position:"Query" name:"EndTime"`
	BeginTime    requests.Integer `position:"Query" name:"BeginTime"`
	CurrentPage  requests.Integer `position:"Query" name:"CurrentPage"`
	TaskId       string           `position:"Query" name:"TaskId"`
}

// OnsMessagePageQueryByTopicResponse is the response struct for api OnsMessagePageQueryByTopic
type OnsMessagePageQueryByTopicResponse struct {
	*responses.BaseResponse
	RequestId  string     `json:"RequestId" xml:"RequestId"`
	HelpUrl    string     `json:"HelpUrl" xml:"HelpUrl"`
	MsgFoundDo MsgFoundDo `json:"MsgFoundDo" xml:"MsgFoundDo"`
}

// CreateOnsMessagePageQueryByTopicRequest creates a request to invoke OnsMessagePageQueryByTopic API
func CreateOnsMessagePageQueryByTopicRequest() (request *OnsMessagePageQueryByTopicRequest) {
	request = &OnsMessagePageQueryByTopicRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ons", "2019-02-14", "OnsMessagePageQueryByTopic", "ons", "openAPI")
	return
}

// CreateOnsMessagePageQueryByTopicResponse creates a response to parse from OnsMessagePageQueryByTopic response
func CreateOnsMessagePageQueryByTopicResponse() (response *OnsMessagePageQueryByTopicResponse) {
	response = &OnsMessagePageQueryByTopicResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
