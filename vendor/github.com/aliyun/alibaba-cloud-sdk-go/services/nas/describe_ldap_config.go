//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package nas

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeLDAPConfig invokes the nas.DescribeLDAPConfig API synchronously
// api document: https://help.aliyun.com/api/nas/describeldapconfig.html
func (client *Client) DescribeLDAPConfig(request *DescribeLDAPConfigRequest) (response *DescribeLDAPConfigResponse, err error) {
	response = CreateDescribeLDAPConfigResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeLDAPConfigWithChan invokes the nas.DescribeLDAPConfig API asynchronously
// api document: https://help.aliyun.com/api/nas/describeldapconfig.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeLDAPConfigWithChan(request *DescribeLDAPConfigRequest) (<-chan *DescribeLDAPConfigResponse, <-chan error) {
	responseChan := make(chan *DescribeLDAPConfigResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeLDAPConfig(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeLDAPConfigWithCallback invokes the nas.DescribeLDAPConfig API asynchronously
// api document: https://help.aliyun.com/api/nas/describeldapconfig.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeLDAPConfigWithCallback(request *DescribeLDAPConfigRequest, callback func(response *DescribeLDAPConfigResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeLDAPConfigResponse
		var err error
		defer close(result)
		response, err = client.DescribeLDAPConfig(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeLDAPConfigRequest is the request struct for api DescribeLDAPConfig
type DescribeLDAPConfigRequest struct {
	*requests.RpcRequest
	FileSystemId string `position:"Query" name:"FileSystemId"`
}

// DescribeLDAPConfigResponse is the response struct for api DescribeLDAPConfig
type DescribeLDAPConfigResponse struct {
	*responses.BaseResponse
	RequestId string                  `json:"RequestId" xml:"RequestId"`
	Ldap      DescribeLDAPConfigLdap0 `json:"Ldap" xml:"Ldap"`
}

type DescribeLDAPConfigLdap0 struct {
	BindDN     string `json:"BindDN" xml:"BindDN"`
	URI        string `json:"URI" xml:"URI"`
	SearchBase string `json:"SearchBase" xml:"SearchBase"`
}

// CreateDescribeLDAPConfigRequest creates a request to invoke DescribeLDAPConfig API
func CreateDescribeLDAPConfigRequest() (request *DescribeLDAPConfigRequest) {
	request = &DescribeLDAPConfigRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("NAS", "2017-06-26", "DescribeLDAPConfig", "nas", "openAPI")
	return
}

// CreateDescribeLDAPConfigResponse creates a response to parse from DescribeLDAPConfig response
func CreateDescribeLDAPConfigResponse() (response *DescribeLDAPConfigResponse) {
	response = &DescribeLDAPConfigResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
