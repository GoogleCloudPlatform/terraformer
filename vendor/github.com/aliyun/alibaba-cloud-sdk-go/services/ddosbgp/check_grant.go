package ddosbgp

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CheckGrant invokes the ddosbgp.CheckGrant API synchronously
// api document: https://help.aliyun.com/api/ddosbgp/checkgrant.html
func (client *Client) CheckGrant(request *CheckGrantRequest) (response *CheckGrantResponse, err error) {
	response = CreateCheckGrantResponse()
	err = client.DoAction(request, response)
	return
}

// CheckGrantWithChan invokes the ddosbgp.CheckGrant API asynchronously
// api document: https://help.aliyun.com/api/ddosbgp/checkgrant.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CheckGrantWithChan(request *CheckGrantRequest) (<-chan *CheckGrantResponse, <-chan error) {
	responseChan := make(chan *CheckGrantResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CheckGrant(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CheckGrantWithCallback invokes the ddosbgp.CheckGrant API asynchronously
// api document: https://help.aliyun.com/api/ddosbgp/checkgrant.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CheckGrantWithCallback(request *CheckGrantRequest, callback func(response *CheckGrantResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CheckGrantResponse
		var err error
		defer close(result)
		response, err = client.CheckGrant(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CheckGrantRequest is the request struct for api CheckGrant
type CheckGrantRequest struct {
	*requests.RpcRequest
	ResourceGroupId string `position:"Query" name:"ResourceGroupId"`
	SourceIp        string `position:"Query" name:"SourceIp"`
}

// CheckGrantResponse is the response struct for api CheckGrant
type CheckGrantResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Status    int    `json:"Status" xml:"Status"`
}

// CreateCheckGrantRequest creates a request to invoke CheckGrant API
func CreateCheckGrantRequest() (request *CheckGrantRequest) {
	request = &CheckGrantRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("ddosbgp", "2018-07-20", "CheckGrant", "ddosbgp", "openAPI")
	return
}

// CreateCheckGrantResponse creates a response to parse from CheckGrant response
func CreateCheckGrantResponse() (response *CheckGrantResponse) {
	response = &CheckGrantResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
