package elasticsearch

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// InstallKibanaSystemPlugin invokes the elasticsearch.InstallKibanaSystemPlugin API synchronously
// api document: https://help.aliyun.com/api/elasticsearch/installkibanasystemplugin.html
func (client *Client) InstallKibanaSystemPlugin(request *InstallKibanaSystemPluginRequest) (response *InstallKibanaSystemPluginResponse, err error) {
	response = CreateInstallKibanaSystemPluginResponse()
	err = client.DoAction(request, response)
	return
}

// InstallKibanaSystemPluginWithChan invokes the elasticsearch.InstallKibanaSystemPlugin API asynchronously
// api document: https://help.aliyun.com/api/elasticsearch/installkibanasystemplugin.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) InstallKibanaSystemPluginWithChan(request *InstallKibanaSystemPluginRequest) (<-chan *InstallKibanaSystemPluginResponse, <-chan error) {
	responseChan := make(chan *InstallKibanaSystemPluginResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.InstallKibanaSystemPlugin(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// InstallKibanaSystemPluginWithCallback invokes the elasticsearch.InstallKibanaSystemPlugin API asynchronously
// api document: https://help.aliyun.com/api/elasticsearch/installkibanasystemplugin.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) InstallKibanaSystemPluginWithCallback(request *InstallKibanaSystemPluginRequest, callback func(response *InstallKibanaSystemPluginResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *InstallKibanaSystemPluginResponse
		var err error
		defer close(result)
		response, err = client.InstallKibanaSystemPlugin(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// InstallKibanaSystemPluginRequest is the request struct for api InstallKibanaSystemPlugin
type InstallKibanaSystemPluginRequest struct {
	*requests.RoaRequest
	InstanceId  string `position:"Path" name:"InstanceId"`
	ClientToken string `position:"Query" name:"clientToken"`
}

// InstallKibanaSystemPluginResponse is the response struct for api InstallKibanaSystemPlugin
type InstallKibanaSystemPluginResponse struct {
	*responses.BaseResponse
	RequestId string   `json:"RequestId" xml:"RequestId"`
	Result    []string `json:"Result" xml:"Result"`
}

// CreateInstallKibanaSystemPluginRequest creates a request to invoke InstallKibanaSystemPlugin API
func CreateInstallKibanaSystemPluginRequest() (request *InstallKibanaSystemPluginRequest) {
	request = &InstallKibanaSystemPluginRequest{
		RoaRequest: &requests.RoaRequest{},
	}
	request.InitWithApiInfo("elasticsearch", "2017-06-13", "InstallKibanaSystemPlugin", "/openapi/instances/[InstanceId]/kibana-plugins/system/actions/install", "elasticsearch", "openAPI")
	request.Method = requests.POST
	return
}

// CreateInstallKibanaSystemPluginResponse creates a response to parse from InstallKibanaSystemPlugin response
func CreateInstallKibanaSystemPluginResponse() (response *InstallKibanaSystemPluginResponse) {
	response = &InstallKibanaSystemPluginResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
