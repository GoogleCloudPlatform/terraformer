// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package codedeploy

type ApplicationRevisionSortBy string

// Enum values for ApplicationRevisionSortBy
const (
	ApplicationRevisionSortByRegisterTime  ApplicationRevisionSortBy = "registerTime"
	ApplicationRevisionSortByFirstUsedTime ApplicationRevisionSortBy = "firstUsedTime"
	ApplicationRevisionSortByLastUsedTime  ApplicationRevisionSortBy = "lastUsedTime"
)

func (enum ApplicationRevisionSortBy) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ApplicationRevisionSortBy) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type AutoRollbackEvent string

// Enum values for AutoRollbackEvent
const (
	AutoRollbackEventDeploymentFailure       AutoRollbackEvent = "DEPLOYMENT_FAILURE"
	AutoRollbackEventDeploymentStopOnAlarm   AutoRollbackEvent = "DEPLOYMENT_STOP_ON_ALARM"
	AutoRollbackEventDeploymentStopOnRequest AutoRollbackEvent = "DEPLOYMENT_STOP_ON_REQUEST"
)

func (enum AutoRollbackEvent) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AutoRollbackEvent) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type BundleType string

// Enum values for BundleType
const (
	BundleTypeTar  BundleType = "tar"
	BundleTypeTgz  BundleType = "tgz"
	BundleTypeZip  BundleType = "zip"
	BundleTypeYaml BundleType = "YAML"
	BundleTypeJson BundleType = "JSON"
)

func (enum BundleType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum BundleType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ComputePlatform string

// Enum values for ComputePlatform
const (
	ComputePlatformServer ComputePlatform = "Server"
	ComputePlatformLambda ComputePlatform = "Lambda"
	ComputePlatformEcs    ComputePlatform = "ECS"
)

func (enum ComputePlatform) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ComputePlatform) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DeploymentCreator string

// Enum values for DeploymentCreator
const (
	DeploymentCreatorUser               DeploymentCreator = "user"
	DeploymentCreatorAutoscaling        DeploymentCreator = "autoscaling"
	DeploymentCreatorCodeDeployRollback DeploymentCreator = "codeDeployRollback"
)

func (enum DeploymentCreator) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DeploymentCreator) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DeploymentOption string

// Enum values for DeploymentOption
const (
	DeploymentOptionWithTrafficControl    DeploymentOption = "WITH_TRAFFIC_CONTROL"
	DeploymentOptionWithoutTrafficControl DeploymentOption = "WITHOUT_TRAFFIC_CONTROL"
)

func (enum DeploymentOption) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DeploymentOption) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DeploymentReadyAction string

// Enum values for DeploymentReadyAction
const (
	DeploymentReadyActionContinueDeployment DeploymentReadyAction = "CONTINUE_DEPLOYMENT"
	DeploymentReadyActionStopDeployment     DeploymentReadyAction = "STOP_DEPLOYMENT"
)

func (enum DeploymentReadyAction) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DeploymentReadyAction) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DeploymentStatus string

// Enum values for DeploymentStatus
const (
	DeploymentStatusCreated    DeploymentStatus = "Created"
	DeploymentStatusQueued     DeploymentStatus = "Queued"
	DeploymentStatusInProgress DeploymentStatus = "InProgress"
	DeploymentStatusSucceeded  DeploymentStatus = "Succeeded"
	DeploymentStatusFailed     DeploymentStatus = "Failed"
	DeploymentStatusStopped    DeploymentStatus = "Stopped"
	DeploymentStatusReady      DeploymentStatus = "Ready"
)

func (enum DeploymentStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DeploymentStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DeploymentTargetType string

// Enum values for DeploymentTargetType
const (
	DeploymentTargetTypeInstanceTarget DeploymentTargetType = "InstanceTarget"
	DeploymentTargetTypeLambdaTarget   DeploymentTargetType = "LambdaTarget"
	DeploymentTargetTypeEcstarget      DeploymentTargetType = "ECSTarget"
)

func (enum DeploymentTargetType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DeploymentTargetType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DeploymentType string

// Enum values for DeploymentType
const (
	DeploymentTypeInPlace   DeploymentType = "IN_PLACE"
	DeploymentTypeBlueGreen DeploymentType = "BLUE_GREEN"
)

func (enum DeploymentType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DeploymentType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DeploymentWaitType string

// Enum values for DeploymentWaitType
const (
	DeploymentWaitTypeReadyWait       DeploymentWaitType = "READY_WAIT"
	DeploymentWaitTypeTerminationWait DeploymentWaitType = "TERMINATION_WAIT"
)

func (enum DeploymentWaitType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DeploymentWaitType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type EC2TagFilterType string

// Enum values for EC2TagFilterType
const (
	EC2TagFilterTypeKeyOnly     EC2TagFilterType = "KEY_ONLY"
	EC2TagFilterTypeValueOnly   EC2TagFilterType = "VALUE_ONLY"
	EC2TagFilterTypeKeyAndValue EC2TagFilterType = "KEY_AND_VALUE"
)

func (enum EC2TagFilterType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum EC2TagFilterType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ErrorCode string

// Enum values for ErrorCode
const (
	ErrorCodeAgentIssue                              ErrorCode = "AGENT_ISSUE"
	ErrorCodeAlarmActive                             ErrorCode = "ALARM_ACTIVE"
	ErrorCodeApplicationMissing                      ErrorCode = "APPLICATION_MISSING"
	ErrorCodeAutoscalingValidationError              ErrorCode = "AUTOSCALING_VALIDATION_ERROR"
	ErrorCodeAutoScalingConfiguration                ErrorCode = "AUTO_SCALING_CONFIGURATION"
	ErrorCodeAutoScalingIamRolePermissions           ErrorCode = "AUTO_SCALING_IAM_ROLE_PERMISSIONS"
	ErrorCodeCodedeployResourceCannotBeFound         ErrorCode = "CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND"
	ErrorCodeCustomerApplicationUnhealthy            ErrorCode = "CUSTOMER_APPLICATION_UNHEALTHY"
	ErrorCodeDeploymentGroupMissing                  ErrorCode = "DEPLOYMENT_GROUP_MISSING"
	ErrorCodeEcsUpdateError                          ErrorCode = "ECS_UPDATE_ERROR"
	ErrorCodeElasticLoadBalancingInvalid             ErrorCode = "ELASTIC_LOAD_BALANCING_INVALID"
	ErrorCodeElbInvalidInstance                      ErrorCode = "ELB_INVALID_INSTANCE"
	ErrorCodeHealthConstraints                       ErrorCode = "HEALTH_CONSTRAINTS"
	ErrorCodeHealthConstraintsInvalid                ErrorCode = "HEALTH_CONSTRAINTS_INVALID"
	ErrorCodeHookExecutionFailure                    ErrorCode = "HOOK_EXECUTION_FAILURE"
	ErrorCodeIamRoleMissing                          ErrorCode = "IAM_ROLE_MISSING"
	ErrorCodeIamRolePermissions                      ErrorCode = "IAM_ROLE_PERMISSIONS"
	ErrorCodeInternalError                           ErrorCode = "INTERNAL_ERROR"
	ErrorCodeInvalidEcsService                       ErrorCode = "INVALID_ECS_SERVICE"
	ErrorCodeInvalidLambdaConfiguration              ErrorCode = "INVALID_LAMBDA_CONFIGURATION"
	ErrorCodeInvalidLambdaFunction                   ErrorCode = "INVALID_LAMBDA_FUNCTION"
	ErrorCodeInvalidRevision                         ErrorCode = "INVALID_REVISION"
	ErrorCodeManualStop                              ErrorCode = "MANUAL_STOP"
	ErrorCodeMissingBlueGreenDeploymentConfiguration ErrorCode = "MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION"
	ErrorCodeMissingElbInformation                   ErrorCode = "MISSING_ELB_INFORMATION"
	ErrorCodeMissingGithubToken                      ErrorCode = "MISSING_GITHUB_TOKEN"
	ErrorCodeNoEc2Subscription                       ErrorCode = "NO_EC2_SUBSCRIPTION"
	ErrorCodeNoInstances                             ErrorCode = "NO_INSTANCES"
	ErrorCodeOverMaxInstances                        ErrorCode = "OVER_MAX_INSTANCES"
	ErrorCodeResourceLimitExceeded                   ErrorCode = "RESOURCE_LIMIT_EXCEEDED"
	ErrorCodeRevisionMissing                         ErrorCode = "REVISION_MISSING"
	ErrorCodeThrottled                               ErrorCode = "THROTTLED"
	ErrorCodeTimeout                                 ErrorCode = "TIMEOUT"
)

func (enum ErrorCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ErrorCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type FileExistsBehavior string

// Enum values for FileExistsBehavior
const (
	FileExistsBehaviorDisallow  FileExistsBehavior = "DISALLOW"
	FileExistsBehaviorOverwrite FileExistsBehavior = "OVERWRITE"
	FileExistsBehaviorRetain    FileExistsBehavior = "RETAIN"
)

func (enum FileExistsBehavior) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum FileExistsBehavior) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type GreenFleetProvisioningAction string

// Enum values for GreenFleetProvisioningAction
const (
	GreenFleetProvisioningActionDiscoverExisting     GreenFleetProvisioningAction = "DISCOVER_EXISTING"
	GreenFleetProvisioningActionCopyAutoScalingGroup GreenFleetProvisioningAction = "COPY_AUTO_SCALING_GROUP"
)

func (enum GreenFleetProvisioningAction) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum GreenFleetProvisioningAction) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type InstanceAction string

// Enum values for InstanceAction
const (
	InstanceActionTerminate InstanceAction = "TERMINATE"
	InstanceActionKeepAlive InstanceAction = "KEEP_ALIVE"
)

func (enum InstanceAction) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum InstanceAction) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type InstanceStatus string

// Enum values for InstanceStatus
const (
	InstanceStatusPending    InstanceStatus = "Pending"
	InstanceStatusInProgress InstanceStatus = "InProgress"
	InstanceStatusSucceeded  InstanceStatus = "Succeeded"
	InstanceStatusFailed     InstanceStatus = "Failed"
	InstanceStatusSkipped    InstanceStatus = "Skipped"
	InstanceStatusUnknown    InstanceStatus = "Unknown"
	InstanceStatusReady      InstanceStatus = "Ready"
)

func (enum InstanceStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum InstanceStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type InstanceType string

// Enum values for InstanceType
const (
	InstanceTypeBlue  InstanceType = "Blue"
	InstanceTypeGreen InstanceType = "Green"
)

func (enum InstanceType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum InstanceType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type LifecycleErrorCode string

// Enum values for LifecycleErrorCode
const (
	LifecycleErrorCodeSuccess             LifecycleErrorCode = "Success"
	LifecycleErrorCodeScriptMissing       LifecycleErrorCode = "ScriptMissing"
	LifecycleErrorCodeScriptNotExecutable LifecycleErrorCode = "ScriptNotExecutable"
	LifecycleErrorCodeScriptTimedOut      LifecycleErrorCode = "ScriptTimedOut"
	LifecycleErrorCodeScriptFailed        LifecycleErrorCode = "ScriptFailed"
	LifecycleErrorCodeUnknownError        LifecycleErrorCode = "UnknownError"
)

func (enum LifecycleErrorCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LifecycleErrorCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type LifecycleEventStatus string

// Enum values for LifecycleEventStatus
const (
	LifecycleEventStatusPending    LifecycleEventStatus = "Pending"
	LifecycleEventStatusInProgress LifecycleEventStatus = "InProgress"
	LifecycleEventStatusSucceeded  LifecycleEventStatus = "Succeeded"
	LifecycleEventStatusFailed     LifecycleEventStatus = "Failed"
	LifecycleEventStatusSkipped    LifecycleEventStatus = "Skipped"
	LifecycleEventStatusUnknown    LifecycleEventStatus = "Unknown"
)

func (enum LifecycleEventStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LifecycleEventStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ListStateFilterAction string

// Enum values for ListStateFilterAction
const (
	ListStateFilterActionInclude ListStateFilterAction = "include"
	ListStateFilterActionExclude ListStateFilterAction = "exclude"
	ListStateFilterActionIgnore  ListStateFilterAction = "ignore"
)

func (enum ListStateFilterAction) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ListStateFilterAction) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type MinimumHealthyHostsType string

// Enum values for MinimumHealthyHostsType
const (
	MinimumHealthyHostsTypeHostCount    MinimumHealthyHostsType = "HOST_COUNT"
	MinimumHealthyHostsTypeFleetPercent MinimumHealthyHostsType = "FLEET_PERCENT"
)

func (enum MinimumHealthyHostsType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum MinimumHealthyHostsType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type RegistrationStatus string

// Enum values for RegistrationStatus
const (
	RegistrationStatusRegistered   RegistrationStatus = "Registered"
	RegistrationStatusDeregistered RegistrationStatus = "Deregistered"
)

func (enum RegistrationStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum RegistrationStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type RevisionLocationType string

// Enum values for RevisionLocationType
const (
	RevisionLocationTypeS3             RevisionLocationType = "S3"
	RevisionLocationTypeGitHub         RevisionLocationType = "GitHub"
	RevisionLocationTypeString         RevisionLocationType = "String"
	RevisionLocationTypeAppSpecContent RevisionLocationType = "AppSpecContent"
)

func (enum RevisionLocationType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum RevisionLocationType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type SortOrder string

// Enum values for SortOrder
const (
	SortOrderAscending  SortOrder = "ascending"
	SortOrderDescending SortOrder = "descending"
)

func (enum SortOrder) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SortOrder) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type StopStatus string

// Enum values for StopStatus
const (
	StopStatusPending   StopStatus = "Pending"
	StopStatusSucceeded StopStatus = "Succeeded"
)

func (enum StopStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum StopStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TagFilterType string

// Enum values for TagFilterType
const (
	TagFilterTypeKeyOnly     TagFilterType = "KEY_ONLY"
	TagFilterTypeValueOnly   TagFilterType = "VALUE_ONLY"
	TagFilterTypeKeyAndValue TagFilterType = "KEY_AND_VALUE"
)

func (enum TagFilterType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TagFilterType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TargetFilterName string

// Enum values for TargetFilterName
const (
	TargetFilterNameTargetStatus        TargetFilterName = "TargetStatus"
	TargetFilterNameServerInstanceLabel TargetFilterName = "ServerInstanceLabel"
)

func (enum TargetFilterName) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TargetFilterName) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TargetLabel string

// Enum values for TargetLabel
const (
	TargetLabelBlue  TargetLabel = "Blue"
	TargetLabelGreen TargetLabel = "Green"
)

func (enum TargetLabel) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TargetLabel) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TargetStatus string

// Enum values for TargetStatus
const (
	TargetStatusPending    TargetStatus = "Pending"
	TargetStatusInProgress TargetStatus = "InProgress"
	TargetStatusSucceeded  TargetStatus = "Succeeded"
	TargetStatusFailed     TargetStatus = "Failed"
	TargetStatusSkipped    TargetStatus = "Skipped"
	TargetStatusUnknown    TargetStatus = "Unknown"
	TargetStatusReady      TargetStatus = "Ready"
)

func (enum TargetStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TargetStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TrafficRoutingType string

// Enum values for TrafficRoutingType
const (
	TrafficRoutingTypeTimeBasedCanary TrafficRoutingType = "TimeBasedCanary"
	TrafficRoutingTypeTimeBasedLinear TrafficRoutingType = "TimeBasedLinear"
	TrafficRoutingTypeAllAtOnce       TrafficRoutingType = "AllAtOnce"
)

func (enum TrafficRoutingType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TrafficRoutingType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TriggerEventType string

// Enum values for TriggerEventType
const (
	TriggerEventTypeDeploymentStart    TriggerEventType = "DeploymentStart"
	TriggerEventTypeDeploymentSuccess  TriggerEventType = "DeploymentSuccess"
	TriggerEventTypeDeploymentFailure  TriggerEventType = "DeploymentFailure"
	TriggerEventTypeDeploymentStop     TriggerEventType = "DeploymentStop"
	TriggerEventTypeDeploymentRollback TriggerEventType = "DeploymentRollback"
	TriggerEventTypeDeploymentReady    TriggerEventType = "DeploymentReady"
	TriggerEventTypeInstanceStart      TriggerEventType = "InstanceStart"
	TriggerEventTypeInstanceSuccess    TriggerEventType = "InstanceSuccess"
	TriggerEventTypeInstanceFailure    TriggerEventType = "InstanceFailure"
	TriggerEventTypeInstanceReady      TriggerEventType = "InstanceReady"
)

func (enum TriggerEventType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TriggerEventType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
