// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package appsync

type ApiCacheStatus string

// Enum values for ApiCacheStatus
const (
	ApiCacheStatusAvailable ApiCacheStatus = "AVAILABLE"
	ApiCacheStatusCreating  ApiCacheStatus = "CREATING"
	ApiCacheStatusDeleting  ApiCacheStatus = "DELETING"
	ApiCacheStatusModifying ApiCacheStatus = "MODIFYING"
	ApiCacheStatusFailed    ApiCacheStatus = "FAILED"
)

func (enum ApiCacheStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ApiCacheStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ApiCacheType string

// Enum values for ApiCacheType
const (
	ApiCacheTypeT2Small   ApiCacheType = "T2_SMALL"
	ApiCacheTypeT2Medium  ApiCacheType = "T2_MEDIUM"
	ApiCacheTypeR4Large   ApiCacheType = "R4_LARGE"
	ApiCacheTypeR4Xlarge  ApiCacheType = "R4_XLARGE"
	ApiCacheTypeR42xlarge ApiCacheType = "R4_2XLARGE"
	ApiCacheTypeR44xlarge ApiCacheType = "R4_4XLARGE"
	ApiCacheTypeR48xlarge ApiCacheType = "R4_8XLARGE"
)

func (enum ApiCacheType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ApiCacheType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ApiCachingBehavior string

// Enum values for ApiCachingBehavior
const (
	ApiCachingBehaviorFullRequestCaching ApiCachingBehavior = "FULL_REQUEST_CACHING"
	ApiCachingBehaviorPerResolverCaching ApiCachingBehavior = "PER_RESOLVER_CACHING"
)

func (enum ApiCachingBehavior) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ApiCachingBehavior) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type AuthenticationType string

// Enum values for AuthenticationType
const (
	AuthenticationTypeApiKey                 AuthenticationType = "API_KEY"
	AuthenticationTypeAwsIam                 AuthenticationType = "AWS_IAM"
	AuthenticationTypeAmazonCognitoUserPools AuthenticationType = "AMAZON_COGNITO_USER_POOLS"
	AuthenticationTypeOpenidConnect          AuthenticationType = "OPENID_CONNECT"
)

func (enum AuthenticationType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AuthenticationType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type AuthorizationType string

// Enum values for AuthorizationType
const (
	AuthorizationTypeAwsIam AuthorizationType = "AWS_IAM"
)

func (enum AuthorizationType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AuthorizationType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ConflictDetectionType string

// Enum values for ConflictDetectionType
const (
	ConflictDetectionTypeVersion ConflictDetectionType = "VERSION"
	ConflictDetectionTypeNone    ConflictDetectionType = "NONE"
)

func (enum ConflictDetectionType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ConflictDetectionType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ConflictHandlerType string

// Enum values for ConflictHandlerType
const (
	ConflictHandlerTypeOptimisticConcurrency ConflictHandlerType = "OPTIMISTIC_CONCURRENCY"
	ConflictHandlerTypeLambda                ConflictHandlerType = "LAMBDA"
	ConflictHandlerTypeAutomerge             ConflictHandlerType = "AUTOMERGE"
	ConflictHandlerTypeNone                  ConflictHandlerType = "NONE"
)

func (enum ConflictHandlerType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ConflictHandlerType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DataSourceType string

// Enum values for DataSourceType
const (
	DataSourceTypeAwsLambda           DataSourceType = "AWS_LAMBDA"
	DataSourceTypeAmazonDynamodb      DataSourceType = "AMAZON_DYNAMODB"
	DataSourceTypeAmazonElasticsearch DataSourceType = "AMAZON_ELASTICSEARCH"
	DataSourceTypeNone                DataSourceType = "NONE"
	DataSourceTypeHttp                DataSourceType = "HTTP"
	DataSourceTypeRelationalDatabase  DataSourceType = "RELATIONAL_DATABASE"
)

func (enum DataSourceType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DataSourceType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DefaultAction string

// Enum values for DefaultAction
const (
	DefaultActionAllow DefaultAction = "ALLOW"
	DefaultActionDeny  DefaultAction = "DENY"
)

func (enum DefaultAction) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DefaultAction) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type FieldLogLevel string

// Enum values for FieldLogLevel
const (
	FieldLogLevelNone  FieldLogLevel = "NONE"
	FieldLogLevelError FieldLogLevel = "ERROR"
	FieldLogLevelAll   FieldLogLevel = "ALL"
)

func (enum FieldLogLevel) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum FieldLogLevel) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type OutputType string

// Enum values for OutputType
const (
	OutputTypeSdl  OutputType = "SDL"
	OutputTypeJson OutputType = "JSON"
)

func (enum OutputType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum OutputType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type RelationalDatabaseSourceType string

// Enum values for RelationalDatabaseSourceType
const (
	RelationalDatabaseSourceTypeRdsHttpEndpoint RelationalDatabaseSourceType = "RDS_HTTP_ENDPOINT"
)

func (enum RelationalDatabaseSourceType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum RelationalDatabaseSourceType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ResolverKind string

// Enum values for ResolverKind
const (
	ResolverKindUnit     ResolverKind = "UNIT"
	ResolverKindPipeline ResolverKind = "PIPELINE"
)

func (enum ResolverKind) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ResolverKind) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type SchemaStatus string

// Enum values for SchemaStatus
const (
	SchemaStatusProcessing    SchemaStatus = "PROCESSING"
	SchemaStatusActive        SchemaStatus = "ACTIVE"
	SchemaStatusDeleting      SchemaStatus = "DELETING"
	SchemaStatusFailed        SchemaStatus = "FAILED"
	SchemaStatusSuccess       SchemaStatus = "SUCCESS"
	SchemaStatusNotApplicable SchemaStatus = "NOT_APPLICABLE"
)

func (enum SchemaStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SchemaStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TypeDefinitionFormat string

// Enum values for TypeDefinitionFormat
const (
	TypeDefinitionFormatSdl  TypeDefinitionFormat = "SDL"
	TypeDefinitionFormatJson TypeDefinitionFormat = "JSON"
)

func (enum TypeDefinitionFormat) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TypeDefinitionFormat) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
