// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudwatch

type AnomalyDetectorStateValue string

// Enum values for AnomalyDetectorStateValue
const (
	AnomalyDetectorStateValuePendingTraining         AnomalyDetectorStateValue = "PENDING_TRAINING"
	AnomalyDetectorStateValueTrainedInsufficientData AnomalyDetectorStateValue = "TRAINED_INSUFFICIENT_DATA"
	AnomalyDetectorStateValueTrained                 AnomalyDetectorStateValue = "TRAINED"
)

func (enum AnomalyDetectorStateValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AnomalyDetectorStateValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ComparisonOperator string

// Enum values for ComparisonOperator
const (
	ComparisonOperatorGreaterThanOrEqualToThreshold            ComparisonOperator = "GreaterThanOrEqualToThreshold"
	ComparisonOperatorGreaterThanThreshold                     ComparisonOperator = "GreaterThanThreshold"
	ComparisonOperatorLessThanThreshold                        ComparisonOperator = "LessThanThreshold"
	ComparisonOperatorLessThanOrEqualToThreshold               ComparisonOperator = "LessThanOrEqualToThreshold"
	ComparisonOperatorLessThanLowerOrGreaterThanUpperThreshold ComparisonOperator = "LessThanLowerOrGreaterThanUpperThreshold"
	ComparisonOperatorLessThanLowerThreshold                   ComparisonOperator = "LessThanLowerThreshold"
	ComparisonOperatorGreaterThanUpperThreshold                ComparisonOperator = "GreaterThanUpperThreshold"
)

func (enum ComparisonOperator) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ComparisonOperator) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type HistoryItemType string

// Enum values for HistoryItemType
const (
	HistoryItemTypeConfigurationUpdate HistoryItemType = "ConfigurationUpdate"
	HistoryItemTypeStateUpdate         HistoryItemType = "StateUpdate"
	HistoryItemTypeAction              HistoryItemType = "Action"
)

func (enum HistoryItemType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum HistoryItemType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ScanBy string

// Enum values for ScanBy
const (
	ScanByTimestampDescending ScanBy = "TimestampDescending"
	ScanByTimestampAscending  ScanBy = "TimestampAscending"
)

func (enum ScanBy) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ScanBy) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type StandardUnit string

// Enum values for StandardUnit
const (
	StandardUnitSeconds         StandardUnit = "Seconds"
	StandardUnitMicroseconds    StandardUnit = "Microseconds"
	StandardUnitMilliseconds    StandardUnit = "Milliseconds"
	StandardUnitBytes           StandardUnit = "Bytes"
	StandardUnitKilobytes       StandardUnit = "Kilobytes"
	StandardUnitMegabytes       StandardUnit = "Megabytes"
	StandardUnitGigabytes       StandardUnit = "Gigabytes"
	StandardUnitTerabytes       StandardUnit = "Terabytes"
	StandardUnitBits            StandardUnit = "Bits"
	StandardUnitKilobits        StandardUnit = "Kilobits"
	StandardUnitMegabits        StandardUnit = "Megabits"
	StandardUnitGigabits        StandardUnit = "Gigabits"
	StandardUnitTerabits        StandardUnit = "Terabits"
	StandardUnitPercent         StandardUnit = "Percent"
	StandardUnitCount           StandardUnit = "Count"
	StandardUnitBytesSecond     StandardUnit = "Bytes/Second"
	StandardUnitKilobytesSecond StandardUnit = "Kilobytes/Second"
	StandardUnitMegabytesSecond StandardUnit = "Megabytes/Second"
	StandardUnitGigabytesSecond StandardUnit = "Gigabytes/Second"
	StandardUnitTerabytesSecond StandardUnit = "Terabytes/Second"
	StandardUnitBitsSecond      StandardUnit = "Bits/Second"
	StandardUnitKilobitsSecond  StandardUnit = "Kilobits/Second"
	StandardUnitMegabitsSecond  StandardUnit = "Megabits/Second"
	StandardUnitGigabitsSecond  StandardUnit = "Gigabits/Second"
	StandardUnitTerabitsSecond  StandardUnit = "Terabits/Second"
	StandardUnitCountSecond     StandardUnit = "Count/Second"
	StandardUnitNone            StandardUnit = "None"
)

func (enum StandardUnit) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum StandardUnit) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type StateValue string

// Enum values for StateValue
const (
	StateValueOk               StateValue = "OK"
	StateValueAlarm            StateValue = "ALARM"
	StateValueInsufficientData StateValue = "INSUFFICIENT_DATA"
)

func (enum StateValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum StateValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type Statistic string

// Enum values for Statistic
const (
	StatisticSampleCount Statistic = "SampleCount"
	StatisticAverage     Statistic = "Average"
	StatisticSum         Statistic = "Sum"
	StatisticMinimum     Statistic = "Minimum"
	StatisticMaximum     Statistic = "Maximum"
)

func (enum Statistic) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum Statistic) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type StatusCode string

// Enum values for StatusCode
const (
	StatusCodeComplete      StatusCode = "Complete"
	StatusCodeInternalError StatusCode = "InternalError"
	StatusCodePartialData   StatusCode = "PartialData"
)

func (enum StatusCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum StatusCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
