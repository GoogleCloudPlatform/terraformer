// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package elasticloadbalancingv2

type ActionTypeEnum string

// Enum values for ActionTypeEnum
const (
	ActionTypeEnumForward             ActionTypeEnum = "forward"
	ActionTypeEnumAuthenticateOidc    ActionTypeEnum = "authenticate-oidc"
	ActionTypeEnumAuthenticateCognito ActionTypeEnum = "authenticate-cognito"
	ActionTypeEnumRedirect            ActionTypeEnum = "redirect"
	ActionTypeEnumFixedResponse       ActionTypeEnum = "fixed-response"
)

func (enum ActionTypeEnum) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ActionTypeEnum) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type AuthenticateCognitoActionConditionalBehaviorEnum string

// Enum values for AuthenticateCognitoActionConditionalBehaviorEnum
const (
	AuthenticateCognitoActionConditionalBehaviorEnumDeny         AuthenticateCognitoActionConditionalBehaviorEnum = "deny"
	AuthenticateCognitoActionConditionalBehaviorEnumAllow        AuthenticateCognitoActionConditionalBehaviorEnum = "allow"
	AuthenticateCognitoActionConditionalBehaviorEnumAuthenticate AuthenticateCognitoActionConditionalBehaviorEnum = "authenticate"
)

func (enum AuthenticateCognitoActionConditionalBehaviorEnum) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AuthenticateCognitoActionConditionalBehaviorEnum) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type AuthenticateOidcActionConditionalBehaviorEnum string

// Enum values for AuthenticateOidcActionConditionalBehaviorEnum
const (
	AuthenticateOidcActionConditionalBehaviorEnumDeny         AuthenticateOidcActionConditionalBehaviorEnum = "deny"
	AuthenticateOidcActionConditionalBehaviorEnumAllow        AuthenticateOidcActionConditionalBehaviorEnum = "allow"
	AuthenticateOidcActionConditionalBehaviorEnumAuthenticate AuthenticateOidcActionConditionalBehaviorEnum = "authenticate"
)

func (enum AuthenticateOidcActionConditionalBehaviorEnum) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AuthenticateOidcActionConditionalBehaviorEnum) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type IpAddressType string

// Enum values for IpAddressType
const (
	IpAddressTypeIpv4      IpAddressType = "ipv4"
	IpAddressTypeDualstack IpAddressType = "dualstack"
)

func (enum IpAddressType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum IpAddressType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type LoadBalancerSchemeEnum string

// Enum values for LoadBalancerSchemeEnum
const (
	LoadBalancerSchemeEnumInternetFacing LoadBalancerSchemeEnum = "internet-facing"
	LoadBalancerSchemeEnumInternal       LoadBalancerSchemeEnum = "internal"
)

func (enum LoadBalancerSchemeEnum) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LoadBalancerSchemeEnum) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type LoadBalancerStateEnum string

// Enum values for LoadBalancerStateEnum
const (
	LoadBalancerStateEnumActive         LoadBalancerStateEnum = "active"
	LoadBalancerStateEnumProvisioning   LoadBalancerStateEnum = "provisioning"
	LoadBalancerStateEnumActiveImpaired LoadBalancerStateEnum = "active_impaired"
	LoadBalancerStateEnumFailed         LoadBalancerStateEnum = "failed"
)

func (enum LoadBalancerStateEnum) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LoadBalancerStateEnum) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type LoadBalancerTypeEnum string

// Enum values for LoadBalancerTypeEnum
const (
	LoadBalancerTypeEnumApplication LoadBalancerTypeEnum = "application"
	LoadBalancerTypeEnumNetwork     LoadBalancerTypeEnum = "network"
)

func (enum LoadBalancerTypeEnum) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LoadBalancerTypeEnum) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ProtocolEnum string

// Enum values for ProtocolEnum
const (
	ProtocolEnumHttp   ProtocolEnum = "HTTP"
	ProtocolEnumHttps  ProtocolEnum = "HTTPS"
	ProtocolEnumTcp    ProtocolEnum = "TCP"
	ProtocolEnumTls    ProtocolEnum = "TLS"
	ProtocolEnumUdp    ProtocolEnum = "UDP"
	ProtocolEnumTcpUdp ProtocolEnum = "TCP_UDP"
)

func (enum ProtocolEnum) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ProtocolEnum) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type RedirectActionStatusCodeEnum string

// Enum values for RedirectActionStatusCodeEnum
const (
	RedirectActionStatusCodeEnumHttp301 RedirectActionStatusCodeEnum = "HTTP_301"
	RedirectActionStatusCodeEnumHttp302 RedirectActionStatusCodeEnum = "HTTP_302"
)

func (enum RedirectActionStatusCodeEnum) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum RedirectActionStatusCodeEnum) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TargetHealthReasonEnum string

// Enum values for TargetHealthReasonEnum
const (
	TargetHealthReasonEnumElbRegistrationInProgress      TargetHealthReasonEnum = "Elb.RegistrationInProgress"
	TargetHealthReasonEnumElbInitialHealthChecking       TargetHealthReasonEnum = "Elb.InitialHealthChecking"
	TargetHealthReasonEnumTargetResponseCodeMismatch     TargetHealthReasonEnum = "Target.ResponseCodeMismatch"
	TargetHealthReasonEnumTargetTimeout                  TargetHealthReasonEnum = "Target.Timeout"
	TargetHealthReasonEnumTargetFailedHealthChecks       TargetHealthReasonEnum = "Target.FailedHealthChecks"
	TargetHealthReasonEnumTargetNotRegistered            TargetHealthReasonEnum = "Target.NotRegistered"
	TargetHealthReasonEnumTargetNotInUse                 TargetHealthReasonEnum = "Target.NotInUse"
	TargetHealthReasonEnumTargetDeregistrationInProgress TargetHealthReasonEnum = "Target.DeregistrationInProgress"
	TargetHealthReasonEnumTargetInvalidState             TargetHealthReasonEnum = "Target.InvalidState"
	TargetHealthReasonEnumTargetIpUnusable               TargetHealthReasonEnum = "Target.IpUnusable"
	TargetHealthReasonEnumTargetHealthCheckDisabled      TargetHealthReasonEnum = "Target.HealthCheckDisabled"
	TargetHealthReasonEnumElbInternalError               TargetHealthReasonEnum = "Elb.InternalError"
)

func (enum TargetHealthReasonEnum) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TargetHealthReasonEnum) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TargetHealthStateEnum string

// Enum values for TargetHealthStateEnum
const (
	TargetHealthStateEnumInitial     TargetHealthStateEnum = "initial"
	TargetHealthStateEnumHealthy     TargetHealthStateEnum = "healthy"
	TargetHealthStateEnumUnhealthy   TargetHealthStateEnum = "unhealthy"
	TargetHealthStateEnumUnused      TargetHealthStateEnum = "unused"
	TargetHealthStateEnumDraining    TargetHealthStateEnum = "draining"
	TargetHealthStateEnumUnavailable TargetHealthStateEnum = "unavailable"
)

func (enum TargetHealthStateEnum) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TargetHealthStateEnum) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TargetTypeEnum string

// Enum values for TargetTypeEnum
const (
	TargetTypeEnumInstance TargetTypeEnum = "instance"
	TargetTypeEnumIp       TargetTypeEnum = "ip"
	TargetTypeEnumLambda   TargetTypeEnum = "lambda"
)

func (enum TargetTypeEnum) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TargetTypeEnum) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
